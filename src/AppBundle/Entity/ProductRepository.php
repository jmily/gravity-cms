<?php

namespace AppBundle\Entity;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    public function findByIdWithCategories($id)
    {
        $query = $this->getEntityManager()
            ->createQuery(
              'SELECT p,c FROM AppBundle:Product p
               LEFT JOIN p.categories c
               WHERE
                p.id = :id
              '
            )
            ->setParameter('id',$id);
        $result = $query->getOneOrNullResult();

        return $result;
    }

    public function findByName($productName)
    {
        if(empty($productName))
        {
            $result = '';
        }
        else
        {
            $query = $this->getEntityManager()
                ->createQuery(
                    'SELECT p FROM AppBundle:Product p WHERE p.name LIKE :productName'
                )
                ->setParameter('productName','%'.$productName.'%');

            $result = $query->getResult();
        }

        return $result;
    }


    public function findAllWithCategoryBrand($currentPage = 1)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT c,p,b FROM AppBundle:Product p
                 LEFT JOIN p.categories c
                 LEFT JOIN p.brand b
                '
            );

        $paginator = $this->paginate($query, $currentPage);
        return $paginator;
    }

    public function findById($id)
    {

        return $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppBundle:Product p
                 WHERE
                 p.id = :id
                '
            )
            ->setParameter('id',$id)
            ->getOneOrNullResult();
    }

    /**
     * Paginator Helper
     *
     * Pass through a query object, current page & limit
     * the offset is calculated from the page and limit
     * returns an `Paginator` instance, which you can call the following on:
     *
     *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
     *     $paginator->count() # Count of ALL posts (ie: `20` posts)
     *     $paginator->getIterator() # ArrayIterator
     *
     * @param Doctrine\ORM\Query $dql   DQL Query Object
     * @param integer            $page  Current page (defaults to 1)
     * @param integer            $limit The total number per page (defaults to 5)
     *
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function paginate($dql, $page = 1, $limit = 5)
    {
        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }
}
